service:
  name: colander-cloud

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  capacities:
    - table: organizationTable
      index:
        - ItemByOrganization
      read:
        minimum: 1
        maximum: 10
        usage: 0.90
    - table: eventTable
      index:
        - EventByResourceStartDate
        - EventByResourceEndDate
        - WsSubscriptionById
        - SubscriptionByResource
        - ItemByResource
      read:
        minimum: 2
        maximum: 10
        usage: 0.85
      write:
        minimum: 2
        maximum: 10
        usage: 0.85

plugins:
  - serverless-webpack
  - serverless-dynamodb-autoscaling
  # - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs16.x
  websocketApiRouteSelectionExpression: $request.body.action
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'dynamodb:DescribeTable'
        - 'dynamodb:Query'
        - 'dynamodb:BatchGetItem'
        - 'dynamodb:BatchWriteItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
      Resource:
        - {
            'Fn::Join':
              [
                '',
                [{ 'Fn::GetAtt': ['organizationTable', 'Arn'] }, '/index/*'],
              ],
          }
        - { 'Fn::GetAtt': ['organizationTable', 'Arn'] }
        - {
            'Fn::Join':
              ['', [{ 'Fn::GetAtt': ['eventTable', 'Arn'] }, '/index/*']],
          }
        - { 'Fn::GetAtt': ['eventTable', 'Arn'] }
    - Effect: Allow
      Action:
        - 's3:PutObject'
        - 's3:GetObject'
        - 's3:DeleteObject'
        - 's3:AbortMultipartUpload'
        - 's3:ListMultipartUploadParts'
        - 's3:ListBucketMultipartUploads'
      Resource:
        - { 'Fn::GetAtt': ['uploadsBucket', 'Arn'] }
        - {
            'Fn::Join':
              ['', [{ 'Fn::GetAtt': ['uploadsBucket', 'Arn'] }, '/*']],
          }

functions:
  #
  # Generic websocket functions
  #
  disconnectWs:
    handler: src/entry/websocket/connection.onDisconnect
    events:
      - websocket:
          route: $disconnect
  #
  # Uploads
  #
  putUpload:
    handler: src/entry/websocket/upload.onPutUpload
    events:
      - websocket:
          route: putUpload
  #
  # Event functions
  #
  subscribeToEventRange:
    handler: src/entry/websocket/events.onSubscribeToEventRange
    events:
      - websocket:
          route: subscribeToEventRange
  unsubscribeFromEventRange:
    handler: src/entry/websocket/events.onUnsubscribeFromEventRange
    events:
      - websocket:
          route: unsubscribeFromEventRange
  putEvent:
    handler: src/entry/websocket/events.onPutEvent
    events:
      - websocket:
          route: putEvent
  eventStreamHandler:
    handler: src/entry/dynamo/events.handler
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          arn:
            Fn::GetAtt:
              - eventTable
              - StreamArn
  #
  # Resource functions
  #
  putResource:
    handler: src/entry/websocket/resources.onPutResource
    events:
      - websocket:
          route: putResource
  #
  # Project functions
  #
  putProject:
    handler: src/entry/websocket/projects.onPutProject
    events:
      - websocket:
          route: putProject
  #
  # Organization functions
  #
  putOrganization:
    handler: src/entry/websocket/organizations.onPutOrganization
    events:
      - websocket:
          route: putOrganization

resources:
  Resources:
    #
    # Store orgs, resources, layouts and their subscriptions
    #
    organizationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Organization
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: organization_id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          #
          # Group items that are related to an organization
          #
          - IndexName: ItemByOrganization
            KeySchema:
              - AttributeName: organization_id
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: 'KEYS_ONLY'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1

    #
    # Store events, projects and their subscriptions
    #
    eventTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Event
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          AttributeName: expire_at
          Enabled: true
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: resource_id
            AttributeType: S
          - AttributeName: subscription_resource_id
            AttributeType: S
          - AttributeName: websocket_id
            AttributeType: S
          - AttributeName: start_date
            AttributeType: S
          - AttributeName: end_date
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          #
          # Index events by resource, sort by start date. Only keys included.
          #
          - IndexName: EventByResourceStartDate
            KeySchema:
              - AttributeName: resource_id
                KeyType: HASH
              - AttributeName: start_date
                KeyType: RANGE
            Projection:
              ProjectionType: 'KEYS_ONLY'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          #
          # Index events by resource, sort by end date. Only keys included.
          #
          - IndexName: EventByResourceEndDate
            KeySchema:
              - AttributeName: resource_id
                KeyType: HASH
              - AttributeName: end_date
                KeyType: RANGE
            Projection:
              ProjectionType: 'KEYS_ONLY'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          #
          # Index ws subscriptions by connection id.
          # This is useful for managing subscriptions for a single ws connection.
          #
          - IndexName: WsSubscriptionById
            KeySchema:
              - AttributeName: websocket_id
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: 'KEYS_ONLY'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          #
          # Contains websocket subscriptions by resource id
          #
          - IndexName: SubscriptionByResource
            KeySchema:
              - AttributeName: subscription_resource_id
                KeyType: HASH
              - AttributeName: websocket_id
                KeyType: RANGE
            Projection:
              ProjectionType: 'INCLUDE'
              NonKeyAttributes:
                - requestContext
                - query
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          #
          # Contains all items for a given resource
          #
          - IndexName: ItemByResource
            KeySchema:
              - AttributeName: resource_id
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: 'KEYS_ONLY'
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    uploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: colander-uploads
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - HEAD
                - PUT
              ExposedHeaders:
                - ETag
              AllowedOrigins:
                - 'https://*.colanderapp.io'
                - 'http://local.colanderapp.io:5173'
